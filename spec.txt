Goal

	jsmodppは次に挙げる目標を目指す、或いは目指さないこととする。
	
	・第一に、JavaScriptによるプログラムにおいて階層化された名前空間を提供する。
	　jsmodppは、JavaScript MODularizing PreProcessorとなることをその名に刻んでいるためだ。
	　プログラムをモジュール化するためには、変数を書き散らかさないよう、
	　モジュールごとに制御可能な名前空間が必要であろう。
	
	・JavaScriptのソースコードをパージングしない。
	　なぜなら、一度JavaScriptの構文解析に立ち入れば、ブラウザ間の独自拡張の
	　底なし沼に足を踏み入れることになるからだ。
	　この制約によって、jsmodpp自体は特定のブラウザに依存することなく、また、
	　プログラマには任意のブラウザに依存したコーディングを可能とする。
	　よって、構文解析が必要となる機能（たとえばマクロ）は一切サポートしない。
	
	・標準に準拠する。
	　ECMA-262 3rd ed.に準拠し、プリプロセッサが生成するコードはすべてこれの許容する範囲とする。
	　これにより、ブラウザ間の互換性を確保する。
	
	・簡便で一貫性・拡張性のある記法を採用する。
	　プリプロセッサ命令の構文を一貫させることで、命令の追加を容易にする。
	　複雑な条件分岐などはサポートしない。
	　多くの場合、JavaScriptの条件分岐には実行環境の情報が必要であるため、
	　Cプリプロセッサの#ifdefのようなものは必要ない。
	
	・ファイルと名前空間を一対一で対応付けることはしない。
	　１つのファイルの中でいくつでも名前空間を使えるようにすることで、
	　異なる名前空間に存在する関数の間で、ファイルスコープを持つプライベートな
	　変数を共有できるようにする。
	　また、複数のファイルから１つの名前空間を何度でも使えるようにすることで、
	　規模の大きいパッケージを、いくつかのファイルに分けて開発できるようにする。



Syntax

	jsmodppは、プログラムソースコードから下で定義される<declaration>にマッチする
	シークエンスをプリプロセッサ命令として扱う。


	<declaration> ::
		<line-head> <white-space>* '//@' <name> <arguments> <white-space>* <end-of-line>

	<line-head>
		is a position where a logical line begins in source file.
		It is the head of a file or just after <line-terminator>.

	<line-terminator>
		is one of the followings.
		LF -- line feed           (\u000A)
		CR -- carriage return     (\u000D)
		LS -- line separator      (\u2028)
		PS -- paragraph separator (\u2029)

	<name> ::
		<name-character>+

	<name-character> :: one of
		'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm'
		'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z'
		'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M'
		'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z'
		'0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '-' '_'

	<white-space>
		is one of the followings:
		HT   -- horizontal tab (\u0009)
		VT   -- vertical tab   (\u000B)
		FF   -- form feed      (\u000C)
		SP   -- space          (\u0020)
		NBSP -- no-break space (\u00A0)
		Any other category "Zs".

	<end-of-line>
		is a position where a logical line ends in source file.
		It is the end of a file or just before <line-terminator>.

	<arguments> ::
		<null-string>
		<arguments> <white-space>+ <argument>

	<null-string>
		is the string which length is zero.

	<argument> ::
		<literal>
		<quoted>

	<literal> ::
		<literal-head> <literal-character>
		
	<literal-head> ::
		Any character except <line-terminator>, <white-space>, "'" and '"'.
		
	<literal-character> ::
		Any character except <line-terminator> and <white-space>.

	<quoted> ::
		''' <single-quoted-character> "'"
		'"' <double-quoted-character> '"'

	<single-quoted-character> ::
		Any character except <line-terminator> and "'".
		"''"

	<double-quoted-character> ::
		Any character except <line-terminator> and '"'.
		'""'



Instructions

	次にあげるものがプリプロセッサとして定義されている。
	上記の構文に従うもので以下で定義されていないものは、すみやかに無視される。
	プリプロセッサ命令の順番は任意の順番で現れてよい。


	//@jsmodpp [VERSION]
		jsmodppを使ってこのソースファイルをプリプロセスすることを宣言する。
		この命令が書かれていないソースファイルはプリプロセスされることを免れる。
		省略可能のVERSIONを指定すると、VERSION以上のjsmodppを要求する。
		VERSIONは１つ以上の整数文字列をドット(.)で連結したものである。

	//@use-namespace NAMESPACE
		このモジュールで使用する名前空間を宣言する。
		NAMESPACEは、１つ以上のJavaScriptの識別子をドット(.)で連結したものである。
		この命令で指定された名前空間がこれ以降、@exportや@sharedのターゲットとなる。
		また、プリプロセスの対象となるソースコードの先頭には、「//@use-namespace window」が
		あると仮定される。（つまりグローバルオブジェクトがデフォルトとして使用される）
		モジュール内でのvarやfunctionがここで指定した名前空間に変数を宣言するわけではない
		ことに注意すること。varやfunctionによる宣言は常にモジュール内でプライベートな
		スコープを持つ。名前空間に変数を作るには@exportと@sharedを使う。
		また、@use-namespaceで指定した名前空間がモジュール内でスコープ解決に使われる
		わけではないことにも注意。このような場合には@namespaceを用いる。
		
	//@export NAME [, NAME ...]
		NAMEで指定された識別子とそれが指す値を、@use-namespace命令で宣言された名前空間にエクスポートする。
		NAMEはJavaScriptでの識別子である。
		宣言された名前はモジュールの評価前に名前空間に定義されるが、値が代入されるのはモジュールの評価後である。
		これは変数をエクスポートするわけではないことに注意すること。
		具体的には、モジュールを評価した後にそのスコープでNAMEで得られる値を、
		名前空間の変数・NAMEに代入する。
		よって、名前空間にエクスポートされた変数の値がモジュールの外部から変更されたとしても、
		その変更はモジュールの内部からは見えない。つまり、関数をエクスポートすることによって
		カプセル化が破壊されることはない。
		名前空間を介してモジュールの外部と変数を共有したい場合には@sharedを用いる。
	
	//@shared NAME [, NAME ...]
		@use-namespaceで宣言された名前空間に変数を宣言する。
		@sharedで宣言された変数がモジュール内で無修飾で参照できるとは限らない点に注意。
		無修飾で参照したい場合は、@with-namespaceでも併せて宣言すれば良い。
	
	//@with-namespace NAMESPACE [, NAMESPACE, ...]
		このモジュール内でスコープ解決に使用する名前空間を宣言する。
		スクリプトを実行する際に、NAMESPACEで指定された名前空間がスコープチェーンの
		に付加されて評価される。
		@with-namespaceで複数の名前空間が指定された場合には前に書かれた名前空間が、
		また@with-namespaceが複数使われた場合には先に宣言された名前空間が優先される。
		@with-namespace宣言はファイルスコープを持つ。つまりこの命令がソースコード中の
		どこに書かれていようと、指定された名前空間はファイルの先頭でもスコープ解決に
		用いられる。
		varやfunctionなどでモジュール内で宣言された変数は、常にこの命令で追加された
		スコープよりも高い優先順位を持つ。

	//@namespace NAMESPACE
		次の命令のシンタックスシュガー。
		//@use-namespace NAMESPACE
		//@with-namespace NAMESPACE

	//@include FILE [, FILE ...]
		FILEで指定されたファイルの内容をこの場所に展開する。
		Cプリプロセッサの#includeと同様の命令。
		FILEが相対パスだった場合、カレントディレクトリから探して見つからなかったら、
		環境変数JSMODPP_INCLUDEに列記されたディレクトリからファイルを探す。

	//@require FILE [, FILE ...}
		モジュールを使用するにはFILEで指定されたJSファイルが必要であることを宣言する。
		この命令はjsmodpp単体では意味を持たない。catjsでモジュールの依存関係を調べるのに使われる。
